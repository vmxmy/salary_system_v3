name: Aliyun Docker Registry Test

on:
  workflow_dispatch:
    inputs:
      registry_type:
        description: '测试的仓库类型'
        required: true
        default: 'aliyun'
        type: choice
        options:
        - aliyun       # 阿里云容器镜像服务
        - dockerhub    # Docker Hub
        - both         # 两种都测试

env:
  TEST_IMAGE_NAME: 'hello-world-test'

jobs:
  test-aliyun-registry:
    name: 阿里云 Docker 仓库测试
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: 显示测试配置
      run: |
        echo "🧪 Docker 仓库登录测试"
        echo "测试类型: ${{ github.event.inputs.registry_type }}"
        echo "时间: $(date)"
        echo ""
        
        echo "📋 阿里云容器镜像服务配置说明:"
        echo "1. 登录 https://cr.console.aliyun.com/"
        echo "2. 创建命名空间（如：salary-system）"
        echo "3. 获取登录凭据"
        echo "4. 在 GitHub Settings > Secrets 中添加:"
        echo "   - ALIYUN_REGISTRY_USERNAME: 阿里云用户名"
        echo "   - ALIYUN_REGISTRY_PASSWORD: 阿里云密码"
        echo "5. 可选：在 Variables 中添加 ALIYUN_REGISTRY (默认: registry.cn-beijing.aliyuncs.com)"
        echo ""
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 检查阿里云配置
      if: github.event.inputs.registry_type == 'aliyun' || github.event.inputs.registry_type == 'both'
      run: |
        echo "🔍 检查阿里云仓库配置..."
        
        if [ -n "${{ secrets.ALIYUN_REGISTRY_USERNAME }}" ]; then
          echo "✅ ALIYUN_REGISTRY_USERNAME 已配置"
          echo "用户名: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}"
        else
          echo "❌ ALIYUN_REGISTRY_USERNAME 未配置"
        fi
        
        if [ -n "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}" ]; then
          echo "✅ ALIYUN_REGISTRY_PASSWORD 已配置"
          echo "密码长度: $(echo '${{ secrets.ALIYUN_REGISTRY_PASSWORD }}' | wc -c)"
        else
          echo "❌ ALIYUN_REGISTRY_PASSWORD 未配置"
        fi
        
        REGISTRY="${{ vars.ALIYUN_REGISTRY || 'registry.cn-beijing.aliyuncs.com' }}"
        echo "Registry URL: $REGISTRY"
        
        # 测试网络连接
        if ping -c 3 registry.cn-beijing.aliyuncs.com; then
          echo "✅ 阿里云仓库网络连接正常"
        else
          echo "⚠️  阿里云仓库网络连接异常"
        fi
        
    - name: 登录阿里云 Docker 仓库
      if: github.event.inputs.registry_type == 'aliyun' || github.event.inputs.registry_type == 'both'
      id: aliyun-login
      continue-on-error: true
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.ALIYUN_REGISTRY || 'registry.cn-beijing.aliyuncs.com' }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        
    - name: 检查 Docker Hub 配置
      if: github.event.inputs.registry_type == 'dockerhub' || github.event.inputs.registry_type == 'both'
      run: |
        echo "🔍 检查 Docker Hub 配置..."
        
        if [ -n "${{ vars.DOCKERHUB_USERNAME }}" ] || [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "✅ Docker Hub 用户名已配置"
        else
          echo "❌ Docker Hub 用户名未配置"
        fi
        
        if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ] || [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "✅ Docker Hub 令牌已配置"
        else
          echo "❌ Docker Hub 令牌未配置"
        fi
        
        # 测试网络连接
        if ping -c 3 hub.docker.com; then
          echo "✅ Docker Hub 网络连接正常"
        else
          echo "⚠️  Docker Hub 网络连接异常"
        fi
        
    - name: 登录 Docker Hub
      if: github.event.inputs.registry_type == 'dockerhub' || github.event.inputs.registry_type == 'both'
      id: dockerhub-login
      continue-on-error: true
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME || secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_PASSWORD }}
        
    - name: 测试镜像推送（阿里云）
      if: steps.aliyun-login.outcome == 'success'
      run: |
        echo "🚀 测试阿里云仓库推送..."
        
        REGISTRY="${{ vars.ALIYUN_REGISTRY || 'registry.cn-beijing.aliyuncs.com' }}"
        USERNAME="${{ secrets.ALIYUN_REGISTRY_USERNAME }}"
        IMAGE_TAG="$REGISTRY/$USERNAME/$TEST_IMAGE_NAME:test"
        
        # 拉取测试镜像
        docker pull hello-world
        
        # 标记为阿里云镜像
        docker tag hello-world $IMAGE_TAG
        
        # 推送到阿里云
        if docker push $IMAGE_TAG; then
          echo "✅ 阿里云仓库推送成功"
          echo "镜像地址: $IMAGE_TAG"
          
          # 清理本地镜像
          docker rmi $IMAGE_TAG || true
        else
          echo "❌ 阿里云仓库推送失败"
        fi
        
    - name: 测试镜像推送（Docker Hub）
      if: steps.dockerhub-login.outcome == 'success'
      run: |
        echo "🚀 测试 Docker Hub 推送..."
        
        USERNAME="${{ vars.DOCKERHUB_USERNAME || secrets.DOCKER_USERNAME }}"
        IMAGE_TAG="$USERNAME/$TEST_IMAGE_NAME:test"
        
        # 拉取测试镜像
        docker pull hello-world
        
        # 标记为 Docker Hub 镜像
        docker tag hello-world $IMAGE_TAG
        
        # 推送到 Docker Hub
        if docker push $IMAGE_TAG; then
          echo "✅ Docker Hub 推送成功"
          echo "镜像地址: $IMAGE_TAG"
          
          # 清理本地镜像
          docker rmi $IMAGE_TAG || true
        else
          echo "❌ Docker Hub 推送失败"
        fi
        
    - name: 测试结果总结
      if: always()
      run: |
        echo "📊 测试结果总结:"
        echo "==================="
        
        if [ "${{ steps.aliyun-login.outcome }}" = "success" ]; then
          echo "✅ 阿里云仓库: 登录成功"
        elif [ "${{ steps.aliyun-login.outcome }}" = "failure" ]; then
          echo "❌ 阿里云仓库: 登录失败"
        fi
        
        if [ "${{ steps.dockerhub-login.outcome }}" = "success" ]; then
          echo "✅ Docker Hub: 登录成功"
        elif [ "${{ steps.dockerhub-login.outcome }}" = "failure" ]; then
          echo "❌ Docker Hub: 登录失败"
        fi
        
        echo ""
        echo "💡 建议:"
        if [ "${{ steps.aliyun-login.outcome }}" = "success" ]; then
          echo "- 阿里云仓库工作正常，推荐在生产环境中使用"
          echo "- 阿里云仓库在中国境内网络连接更稳定"
        else
          echo "- 如需使用阿里云仓库，请检查配置并重试"
        fi
        
        if [ "${{ steps.dockerhub-login.outcome }}" != "success" ]; then
          echo "- Docker Hub 连接存在问题，建议切换到阿里云仓库"
        fi
        
    - name: 清理测试镜像
      if: always()
      run: |
        echo "🧹 清理测试镜像..."
        docker rmi hello-world || true
        docker system prune -f || true