name: Build and Push Docker Image

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  APP_NAME: 'salary-system-v3'

jobs:
  # 构建和测试
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run tests
      working-directory: ./frontend
      run: |
        npm run lint
        npx tsc --noEmit
        
    - name: Build application for production
      working-directory: ./frontend
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_BASE_PATH: '/'
        NODE_ENV: production
      run: |
        echo "🏗️  开始构建生产版本..."
        npm run build
        
        # 显示构建结果信息
        echo "📦 构建完成，文件统计:"
        ls -la dist/
        du -sh dist/
        find dist/ -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
          
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: frontend/dist/
        retention-days: 7

  # 构建和推送 Docker 镜像
  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    
    # 使用 github-pages Environment secrets
    environment: 
      name: github-pages
      
    outputs:
      image-tag: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 不再需要下载预构建的 artifacts，因为现在在 Docker 容器内构建
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_APP_URL=http://localhost:3000
          VITE_DISABLE_PROXY=true
          VITE_SHOW_DEBUG_INFO=false
          
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      continue-on-error: true
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
        format: spdx-json
        output-file: /tmp/sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      if: success() || failure()
      continue-on-error: true
      with:
        name: sbom
        path: /tmp/sbom.spdx.json
        
    - name: Build completion notification
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🚀 Docker 镜像构建成功！"
          echo ""
          echo "📋 构建信息："
          echo "镜像: ${{ needs.build-and-push-image.outputs.image-tag }}"
          echo "版本: ${{ github.sha }}"
          echo "构建时间: $(date)"
          echo ""
          echo "🐳 启动命令："
          echo "docker pull ${{ needs.build-and-push-image.outputs.image-tag }}"
          echo "docker run -d --name salary-system-v3 --restart unless-stopped -p 3001:3000 ${{ needs.build-and-push-image.outputs.image-tag }}"
          echo ""
          echo "🔍 管理命令："
          echo "docker logs salary-system-v3 -f"
          echo "docker stats salary-system-v3"
        else
          echo "❌ Docker 镜像构建失败！"
          echo ""
          echo "🔧 故障排除建议："
          echo "1. 检查前端构建是否成功"
          echo "2. 验证 Docker Hub 连接状态"
          echo "3. 确认环境变量配置正确"
          echo "4. 查看详细构建日志"
        fi