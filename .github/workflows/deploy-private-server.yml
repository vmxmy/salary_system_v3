name: Deploy to Private Server

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      deploy_type:
        description: '部署类型'
        required: true
        default: 'rolling'
        type: choice
        options:
        - rolling    # 滚动部署
        - blue_green # 蓝绿部署
        - canary     # 金丝雀部署

env:
  NODE_VERSION: '20'
  APP_NAME: 'salary-system-v3'

jobs:
  # 构建和测试
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run tests
      working-directory: ./frontend
      run: |
        npm run lint
        npx tsc --noEmit
        
    - name: Build application for production
      working-directory: ./frontend
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        NODE_ENV: production
      run: |
        echo "🏗️  开始构建生产版本..."
        npm run build
        
        # 显示构建结果信息
        echo "📦 构建完成，文件统计:"
        ls -la dist/
        du -sh dist/
        find dist/ -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
          
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: frontend/dist/
        retention-days: 7
          
  # 部署到私有服务器 - 静态文件部署
  deploy-to-server:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: build-and-test
    if: true   # ✅ 已配置SSH凭据，启用静态文件部署
    
    # ✅ 使用 github-pages Environment secrets
    environment: 
      name: github-pages
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./dist
        
    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
        
    - name: Validate deployment configuration
      run: |
        echo "🔍 验证部署配置..."
        
        # 检查必要的 Secrets
        if [ -z "${{ secrets.SSH_USER }}" ]; then
          echo "❌ SSH_USER secret 未配置"
          exit 1
        fi
        
        if [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "❌ SSH_HOST secret 未配置"  
          exit 1
        fi
        
        if [ -z "${{ secrets.SERVER_WEB_ROOT }}" ]; then
          echo "❌ SERVER_WEB_ROOT secret 未配置（如：/var/www/html）"
          exit 1
        fi
        
        echo "✅ SSH 配置验证通过"
        echo "用户: ${{ secrets.SSH_USER }}"
        echo "主机: ${{ secrets.SSH_HOST }}"
        echo "部署路径: ${{ secrets.SERVER_WEB_ROOT }}"
        
        # 显示构建文件信息
        echo ""
        echo "📦 准备部署的文件:"
        ls -la ./dist/
        echo "总大小: $(du -sh ./dist/ | cut -f1)"
        
    # 健康检查 - 部署前
    - name: Pre-deployment health check
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "🔍 执行部署前健康检查..."
          
          # 检查磁盘空间
          disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$disk_usage" -gt 85 ]; then
            echo "❌ 磁盘空间不足：${disk_usage}%"
            exit 1
          fi
          echo "💾 磁盘使用率：${disk_usage}%"
          
          # 检查内存
          memory_free=$(free | awk '/^Mem:/ {printf "%.1f", (($2-$3)/$2)*100}')
          echo "💾 可用内存：${memory_free}%"
          
          # 检查 Web 服务器进程（Apache/Nginx）
          if pgrep -x "nginx" > /dev/null || pgrep -x "apache2" > /dev/null || pgrep -x "httpd" > /dev/null; then
            echo "✅ Web 服务器运行正常"
          else
            echo "⚠️  未检测到 Web 服务器进程，请确保已安装并运行"
          fi
          
          echo "✅ 服务器状态正常，可以开始部署"
        EOF
        
    # 创建部署目录和备份
    - name: Prepare deployment directory
      env:
        WEB_ROOT: ${{ secrets.SERVER_WEB_ROOT }}
        DEPLOY_TYPE: ${{ github.event.inputs.deploy_type || 'rolling' }}
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "📁 准备部署目录..."
          
          # 设置变量
          WEB_ROOT="${{ secrets.SERVER_WEB_ROOT }}"
          BACKUP_DIR="/opt/backups/salary-system/$(date +%Y%m%d_%H%M%S)"
          
          # 创建备份目录
          mkdir -p $BACKUP_DIR
          chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /opt/backups/salary-system/ 2>/dev/null || echo "备份目录权限设置完成"
          
          # 备份当前网站文件（如果存在）
          if [ -d "$WEB_ROOT" ] && [ "$(ls -A $WEB_ROOT 2>/dev/null)" ]; then
            echo "💾 备份当前网站文件到: $BACKUP_DIR"
            cp -r $WEB_ROOT/* $BACKUP_DIR/ || echo "⚠️  备份过程中遇到一些警告，继续执行"
            echo "BACKUP_DIR=$BACKUP_DIR" >> /tmp/deploy_env
          else
            echo "ℹ️  没有发现现有文件，跳过备份"
          fi
          
          # 确保 Web 根目录存在并设置正确权限
          mkdir -p $WEB_ROOT
          chown -R ${{ secrets.SSH_USER }}:www-data $WEB_ROOT 2>/dev/null || chown -R ${{ secrets.SSH_USER }}:apache $WEB_ROOT 2>/dev/null || chown -R ${{ secrets.SSH_USER }} $WEB_ROOT
          chmod -R 755 $WEB_ROOT
          
          echo "✅ 目录准备完成"
        EOF
        
    # 部署静态文件
    - name: Deploy static files
      env:
        WEB_ROOT: ${{ secrets.SERVER_WEB_ROOT }}
        DEPLOY_TYPE: ${{ github.event.inputs.deploy_type || 'rolling' }}
      run: |
        echo "🚀 开始部署静态文件..."
        echo "部署类型: $DEPLOY_TYPE"
        echo "目标路径: $WEB_ROOT"
        
        if [ "$DEPLOY_TYPE" = "blue_green" ]; then
          # 蓝绿部署：先部署到临时目录，然后原子切换
          echo "💙💚 使用蓝绿部署策略"
          
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            TEMP_DIR="$HOME/temp_deploy_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $TEMP_DIR
            echo "TEMP_DIR=$TEMP_DIR" >> /tmp/deploy_env
            echo $TEMP_DIR
          EOF
          
          # 获取临时目录路径并复制文件
          TEMP_DIR=$(ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'source /tmp/deploy_env && echo $TEMP_DIR')
          scp -r ./dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$TEMP_DIR/
          
          # 原子切换
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            source /tmp/deploy_env
            rm -rf ${{ secrets.SERVER_WEB_ROOT }}/*
            cp -r $TEMP_DIR/* ${{ secrets.SERVER_WEB_ROOT }}/
            chown -R ${{ secrets.SSH_USER }}:www-data ${{ secrets.SERVER_WEB_ROOT }} 2>/dev/null || chown -R ${{ secrets.SSH_USER }}:apache ${{ secrets.SERVER_WEB_ROOT }} 2>/dev/null || chown -R ${{ secrets.SSH_USER }} ${{ secrets.SERVER_WEB_ROOT }}
            chmod -R 755 ${{ secrets.SERVER_WEB_ROOT }}
            rm -rf $TEMP_DIR
            echo "✅ 蓝绿部署完成"
          EOF
          
        else
          # 滚动部署：直接替换文件
          echo "🔄 使用滚动部署策略"
          
          # 清理目标目录
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "🧹 清理目标目录..."
            find ${{ secrets.SERVER_WEB_ROOT }} -mindepth 1 -delete 2>/dev/null || echo "目录已清空"
          EOF
          
          # 复制新文件
          echo "📦 复制新文件..."
          scp -r ./dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SERVER_WEB_ROOT }}/
          
          # 设置权限
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "🔐 设置文件权限..."
            chown -R ${{ secrets.SSH_USER }}:www-data ${{ secrets.SERVER_WEB_ROOT }} 2>/dev/null || chown -R ${{ secrets.SSH_USER }}:apache ${{ secrets.SERVER_WEB_ROOT }} 2>/dev/null || chown -R ${{ secrets.SSH_USER }} ${{ secrets.SERVER_WEB_ROOT }}
            chmod -R 755 ${{ secrets.SERVER_WEB_ROOT }}
            find ${{ secrets.SERVER_WEB_ROOT }} -type f -exec chmod 644 {} \;
            echo "✅ 滚动部署完成"
          EOF
        fi
        
    # 重启/重载 Web 服务器
    - name: Reload web server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "🔄 重载 Web 服务器配置..."
          
          # 尝试重载 Nginx
          if command -v nginx >/dev/null 2>&1; then
            echo "📋 检测到 Nginx，尝试重载配置..."
            sudo nginx -t && sudo systemctl reload nginx || echo "⚠️  Nginx 重载失败"
            echo "✅ Nginx 状态: $(systemctl is-active nginx)"
          fi
          
          # 尝试重载 Apache
          if command -v apache2 >/dev/null 2>&1; then
            echo "📋 检测到 Apache2，尝试重载配置..."
            sudo apache2ctl configtest && sudo systemctl reload apache2 || echo "⚠️  Apache2 重载失败"
            echo "✅ Apache2 状态: $(systemctl is-active apache2)"
          elif command -v httpd >/dev/null 2>&1; then
            echo "📋 检测到 httpd，尝试重载配置..."
            sudo httpd -t && sudo systemctl reload httpd || echo "⚠️  httpd 重载失败"
            echo "✅ httpd 状态: $(systemctl is-active httpd)"
          fi
          
          echo "🎯 Web 服务器重载完成"
        EOF
        
    # 部署后健康检查
    - name: Post-deployment health check
      env:
        WEB_ROOT: ${{ secrets.SERVER_WEB_ROOT }}
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          echo "🔍 执行部署后健康检查..."
          
          # 检查文件是否成功部署
          if [ ! -f "$WEB_ROOT/index.html" ]; then
            echo "❌ index.html 文件不存在，部署可能失败"
            exit 1
          fi
          
          echo "✅ 主文件存在检查通过"
          
          # 显示部署的文件统计
          echo "📊 部署文件统计:"
          find $WEB_ROOT -type f | wc -l | xargs echo "文件总数:"
          du -sh $WEB_ROOT | cut -f1 | xargs echo "总大小:"
          
          # 检查关键文件
          echo "📋 关键文件检查:"
          for file in index.html assets/index-*.js assets/index-*.css; do
            if find $WEB_ROOT -path "*\$file" | head -1 | read; then
              echo "✅ 找到: \$file"
            else
              echo "⚠️  未找到: \$file"  
            fi
          done
        EOF
        
        # 尝试 HTTP 健康检查（如果配置了域名）
        if [ -n "${{ secrets.SERVER_DOMAIN }}" ]; then
          echo "🌐 尝试 HTTP 健康检查..."
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "尝试第 $attempt 次 HTTP 检查..."
            
            if curl -f -s -I "http://${{ secrets.SERVER_DOMAIN }}" | head -1 | grep -q "200"; then
              echo "✅ HTTP 健康检查通过"
              curl -I "http://${{ secrets.SERVER_DOMAIN }}"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "⚠️  HTTP 检查未通过，但不影响部署结果"
              echo "请手动检查网站：http://${{ secrets.SERVER_DOMAIN }}"
            fi
            
            sleep 5
            attempt=$((attempt + 1))
          done
        else
          echo "ℹ️  未配置 SERVER_DOMAIN，跳过 HTTP 检查"
        fi
        
        echo "🎉 部署健康检查完成！"
        
    # 清理旧版本备份
    - name: Cleanup old backups
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "🧹 清理旧版本备份..."
          
          BACKUP_BASE="/opt/backups/salary-system"
          
          if [ -d "$BACKUP_BASE" ]; then
            # 保留最近 5 个备份，删除其他的
            cd $BACKUP_BASE
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || echo "没有旧备份需要清理"
            
            remaining=$(ls | wc -l)
            echo "✅ 清理完成，保留 $remaining 个备份"
          else
            echo "ℹ️  没有备份目录需要清理"
          fi
        EOF
        
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🚀 静态文件部署成功！"
          echo ""
          echo "📋 部署信息："
          echo "环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "版本: ${{ github.sha }}"
          echo "部署类型: ${{ github.event.inputs.deploy_type || 'rolling' }}"
          echo "目标路径: ${{ secrets.SERVER_WEB_ROOT }}"
          echo "部署时间: $(date)"
          echo ""
          if [ -n "${{ secrets.SERVER_DOMAIN }}" ]; then
            echo "🌐 访问地址: http://${{ secrets.SERVER_DOMAIN }}"
          else
            echo "💡 请配置 SERVER_DOMAIN secret 以便显示访问地址"
          fi
        else
          echo "❌ 静态文件部署失败！"
          echo ""
          echo "🔧 故障排除建议："
          echo "1. 检查 SSH 连接是否正常"
          echo "2. 验证服务器权限配置"
          echo "3. 确认 SERVER_WEB_ROOT 路径正确"
          echo "4. 检查磁盘空间是否充足"
          echo "5. 查看详细部署日志"
        fi